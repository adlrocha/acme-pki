#/bin/bash
# ACME PRIVATE PKI
# The directories architectures and cnf files should already be
# configured from the beginning

create-ca-certificate(){
        echo "[] Creating CA certificate"
	cd ca
	touch index.txt
	openssl req -new -config ca.cnf -keyout ca.key -out ca.req
	openssl ca -config ca-sign.cnf -extensions X509_ca -days 3650 -create_serial -selfsign \
    -keyfile ca.key -in ca.req -out ca.crt
	chmod 400 ca.key
	chmod 444 ca.crt
	cd ..
}


sign-server-certificate(){
        echo "[] Signing server certificate"
	cp $1/$1.req ca/
	cd ca
	openssl ca -batch --passin:acme -config ca-sign.cnf -extensions X509_server -in $1.req -out $1.crt
	cd ..
	rm ca/$1.req
	rm $1/$1.req
	cp ca/$1.crt $1/
}

create-server-certificate(){
        echo "[] Creating server certificate"
	mkdir $1
        sed "s/{{client_id}}/$1/g" client.cnf > $1/$1.cnf
	cp ca/ca.crt $1
	cd $1 
	#Generate prime numbers
	openssl dhparam -out dh2048.pem 2048
	#Create server request certificate
	openssl req -new -config $1.cnf -keyout $1.key -out $1.req
	chmod 400 $1.key
	cd ..
	sign-server-certificate $1
}


sign-client-certificate(){
        echo "[] Signing client certificate"
        cp $1/$1.req ca/
        cd ca/
        openssl ca -batch -passin pass:acme -config ca-sign.cnf -out $1.crt -in $1.req
        cd ..
        rm ca/$1.req
        rm $1/$1.req
        cp ca/$1.crt $1/
}

create-client-certificate(){
        echo "[] Creating client certificate"
	mkdir $1
	cp ca/ca.crt $1/
        sed "s/{{client_id}}/$1/g" client.cnf > $1/$1.cnf
        cd $1
        openssl req -new -config $1.cnf -keyout $1.key -out $1.req
        chmod 400 $1.key
        cd ..
	sign-client-certificate $1

}


sign-temporal-certificate(){
        echo "[] Signing temporal certificate"
        cp $1/$1.req ca/
        cd ca/
        openssl ca -batch -passin pass:acme -config ca-sign-temporal.cnf -out $1.crt -in $1.req
        cd ..
        rm ca/$1.req
        rm $1/$1.req
        cp ca/$1.crt $1/
	zip $1.zip $1/*
	rm -r $1
}

create-temporal-certificate(){
        echo "[] Creating temporal certificate"
	mkdir $1
	cp ca/ca.crt $1/
        sed "s/{{client_id}}/$1/g" client.cnf > $1/$1.cnf
        cd $1
        openssl req -new -config $1.cnf -keyout $1.key -out $1.req
        chmod 400 $1.key
        cd ..
	sign-temporal-certificate $1

}


revoke-certificate(){
        echo "[] Revoking certificate ..."
        cd ca
        openssl ca -passin pass:acme -config ca-sign.cnf -crl_reason keyCompromise -revoke $1.crt
        openssl ca -passin pass:acme -config ca-sign.cnf -gencrl -out crl.pem
        #Remove revoked certificates from CA folder
        rm ca/$1.crt
        cd ..
	rm -r $1
}

generate-crl(){
	echo "[] Generating CRL"
	cd ca
        openssl ca -passin pass:acme -config ca-sign.cnf -gencrl -out crl.pem
	cd ..
}

#This is an admin function. For certificates managed by clients (as temporal ones)
#the 
install-certificate(){
	scp -r $1 $2@$3:$4
}

new-ca-pass(){
	cd ca
	openssl rsa -des3 -in ca.key -out ca_new.key
	mv ca_new.key ca.key
	cd ..
}

help() {
echo "-------------------"
echo "ACME PRIVATE PKI"
echo "-------------------"
echo "COMMANDS"
echo "[] create-ca-certificate"
echo "[] create-server-certificate [server-id]"
echo "[] create-client-certificate [client-id]"
echo "[] create-temporal-certificate [temporal-id]"
echo "[] revoke-certificate [client/server-id]"
echo "[] install-certificate [client_id] [valid_user] [device_IP] [directory]"
echo "[] generate-crl"
echo "[] new-ca-pass" 

}


eval "$@"
