#!/bin/bash
# 
# Alfonso de la Rocha - 2016
#
# This script should be placed in /usr/local/bin

# absolute path to executable binary
progpath='/etc/pki/crl-service'

# arguments to script
opts=''

# binary program name
#prog=$(basename $progpath)
prog='crl-service'

# pid file
pidfile="/var/run/${prog}.pid"

# make sure full path to executable binary is found
! [ -x $progpath ] && echo "$progpath: executable not found" && exit 1

# Evaluates command results
eval_cmd() {
   local rc=$1
   if [ $rc -eq 0 ]; then
      echo '[  OK  ]'
   else
      echo '[FAILED]'
   fi
   return $rc
}

# Start service function
start() {
   #local pids=$(pgrep $prog)
   if [ "$(id -u)" != "0" ]; then
       echo "Operation not permitted: This command must be run as root" 1>&2
   exit 1
   fi

   local pids=$(ps aux | grep $prog | grep $progpath | grep -v grep\
       | awk '{print $2}')
   if [ -n "$pids" ]; then
      echo "$prog (pid $pids) is already running"
      return 0
   fi
   printf "%-50s%s" "Starting $prog: " ''
   #Executes program
   nohup $progpath >/dev/null 2>&1 & #$opts &

   # save pid to file if you want
   echo $! > $pidfile

   # check again if running
   pgrep $prog >/dev/null 2>&1
   eval_cmd $?
}

#Stop service function
stop() {
   #local pids=$(pgrep $prog)
   if [ "$(id -u)" != "0" ]; then
       echo "Operation not permitted: This command must be run as root" 1>&2
   exit 1
   fi

   local pids=$(ps aux | grep $prog | grep $progpath | grep -v grep\
       | awk '{print $2}')

   if [ -z "$pids" ]; then
      echo "$prog not running"
      return 0
   fi
   printf "%-50s%s" "Stopping $prog: " ''
   rm -f $pidfile
   kill -9 $pids
   #pkill $prog
   eval_cmd $?
}

#Status service function
status() {
   # see if running
   #local pids=$(pgrep -c $prog)
   local pids=$(ps aux | grep $prog | grep $progpath | grep -v grep\
       | awk '{print $2}')

   if [ -n "$pids" ]; then
      echo "$prog (pid $pids) is running"
   else
      echo "$prog is stopped"
   fi
}

#Logic
case $1 in
   start)
      start
      ;;
   stop)
      stop
      ;;
   status)
      status
      ;;
   restart)
      stop
      sleep 1
      start
      ;;
   *)
      echo "Usage: $0 {start|stop|status|restart}"
      exit 1
esac
exit $?
